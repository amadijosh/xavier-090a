<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd" https="true">
	<meta>
		<author>Zach Graves (zachg@yahoo-inc.com)</author>
		<description>Twitter OAuth API</description>
		<documentationURL>http://apiwiki.twitter.com/Twitter-API-Documentation</documentationURL>
		<sampleQuery>select * from {table} where oauth_token = @oauth_token AND oauth_token_secret = @oauth_token_secret AND oauth_consumer_key = @oauth_consumer_key AND oauth_consumer_secret = @oauth_consumer_secret </sampleQuery>
	</meta>
	<bindings>
		<select itemPath="statuses" produces="XML">
			<urls>
				<url>https://api.twitter.com/1.1/statuses/home_timeline.json</url>
			</urls>
			<inputs>
				<key id="since_id" type="xs:string" paramType="query" required="false"/>
				<key id="max_id" type="xs:string" paramType="query" required="false"/>
				<key id="count" type="xs:string" paramType="query" required="false"/>
				<key id="page" type="xs:string" paramType="query" required="false"/>
				<key id="entities" type="xs:string" paramType="query" required="false"/> 
				
				<key id="oauth_consumer_key" type="xs:string" paramType="variable" required="true"/>
				<key id="oauth_consumer_secret" type="xs:string" paramType="variable" required="true"/>
				<key id="oauth_token" type="xs:string" paramType="variable" required="true"/>
				<key id="oauth_token_secret" type="xs:string" paramType="variable" required="true"/>
			</inputs>
			<execute>
				<![CDATA[
y.include("http://oauth.googlecode.com/svn/code/javascript/oauth.js");
y.include("http://oauth.googlecode.com/svn/code/javascript/sha1.js");
function oAuthSignRequest(args)
{
   var accessor = args.accessor;
   
   var message = {};
   message.action = args.action || request.url;
   message.method = args.method || 'GET';
   message.parameters = args.parameters || null;
   
   OAuth.setTimestampAndNonce(message);
   OAuth.setParameter(message, "oauth_consumer_key", accessor.consumerKey);
   OAuth.setParameter(message, "oauth_version", '1.0');

   if(accessor.token) {
      OAuth.setParameter(message, "oauth_token", accessor.token);
   }

   OAuth.SignatureMethod.sign(message, accessor);
   
   var realm = accessor.realm || '';
   var header = OAuth.getAuthorizationHeader(realm, message.parameters);
   var auth = {message:message, accessor:accessor, header:header};
   
   if(args.debug==true) {
      y.log(auth);
   }
   
   return auth;
}

function sendRequest(args)
{
   switch(args.method) {
   	 case 'POST': 
       return postRequest(args);
     case 'PUT':
       return putRequest(args);
     case 'DELETE':
       return deleteRequest(args);
     case 'GET':
     default:
       return getRequest(args);
   }
   return null;
}

function getRequest(args)
{
   var auth = (args.accessor) ? oAuthSignRequest(args) : null;

   var rsp = null;
   try {
      if(auth) request.header('Authorization', auth.header);
      rsp = request.contentType('application/json').get().response;
   } catch(err) {
      rsp = {'result':'failure', 'error': err};
   }
   return rsp;
}

var accessor = {};
accessor.consumerKey = oauth_consumer_key;
accessor.consumerSecret = oauth_consumer_secret;
accessor.realm = request.url;
accessor.token = oauth_token;
accessor.tokenSecret = oauth_token_secret;
 
var respx = sendRequest({
   action: request.url,
   method: 'GET',
   accessor: accessor,
   parameters: null
}); 
 var results = <results></results>;
 results.appendChild(respx.json);
 y.log(results);
 response.object = results; 
				]]>
			</execute>
		</select>
	</bindings>
</table>
